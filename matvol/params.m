%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% WARNING!!!
% the selected models on which task the partcicipant did first!!
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


chemin={'/media/NewData/champignon/data/'};
suj = get_subdir_regex(chemin);
suj_root=suj;

% ou
% suj = get_subdir_regex(chemin,'^2'); %to get all subdir that start with 2
% to see the content

addpath('/media/NewData/champignon/tools/functions/')


for i=1:length(suj)
   suj{i}=[suj{i} '/comb_data/'];
end

suj


%% functional and anatomic subdir

% par.dfonc_reg=[subdir 'RUN[123]_AP_Echo_0$'];
% par.dfonc_reg_oposit_phase =[subdir 'RUN[123]_PA_Echo_0$'];
% par.danat_reg=[subdir 'T1w_MPR'];
par.dfonc_reg='^run[123]_block[12]$';
% par.dfonc_reg_oposit_phase = 'RUN[123]_PA_Echo_0$';
par.danat_reg='anat';

%for the preprocessing : Volume selecytion
par.anat_file_reg  = '^s.*nii'; %le nom generique du volume pour l'anat
par.file_reg  = '^sw.*nii'; %le nom generique du volume pour les fonctionel
par.rp_reg  = '^rp.*txt'; %le nom generique du fichier de mouvement


par.TR = 1.68; %for slice timing
par.run=1;par.display=0; 

%% get subdir
dfonc = get_subdir_regex_multi(suj,par.dfonc_reg)
% dfonc_op = get_subdir_regex_multi(suj,par.dfonc_reg_oposit_phase)
% dfoncall = get_subdir_regex_multi(suj,{par.dfonc_reg,par.dfonc_reg_oposit_phase })
anat = get_subdir_regex_one(suj,par.danat_reg) %should be no warning


%% first level
sta=r_mkdir(suj,'stat')
st =r_mkdir(sta,'champi_nopress')

% for nrun=1:3
%     for nblock=1:2
%         load([suj_root '/onsets/onsets_run' num2str(nrun) '_block' num2str(nblock) '_nopress'])
%         for i=1:5
%             onset{1}(i).name = names{i};
%             onset{1}(i).onset = onsets{i};
%             onset{1}(i).duration = durations{i};
%         end
%     end
% end
% 
% onset{1}(1).name = 'control_diff';  onset{1}(1).onset = 0:48:167 ;  onset{1}(1).duration = ones(1,4)*24;
% onset{1}(2).name = 'rappel_diff';   onset{1}(2).onset = 24:48:167 ; onset{1}(2).duration = ones(1,3)*24;
% 
% onset{2}(1).name = 'control_flu';   onset{2}(1).onset =  0:60:209 ;  onset{2}(1).duration = ones(1,4)*30;
% onset{2}(2).name = 'fluence';       onset{2}(2).onset = 30:60:209; onset{2}(2).duration = ones(1,3)*30;
% 
% onset{3}(1).name = 'control_enco';  onset{3}(1).onset =  0:72:251;  onset{3}(1).duration = ones(1,4)*36;
% onset{3}(2).name = 'encodage';      onset{3}(2).onset = 36:72:251; onset{3}(2).duration = ones(1,3)*36;
% 
% onset{4}(1).name = 'control_imm';  onset{4}(1).onset = 0:48:167  ;  onset{4}(1).duration = ones(1,4)*24;
% onset{4}(2).name = 'rappel_imm';   onset{4}(2).onset = 24:48:167 ; onset{4}(2).duration = ones(1,3)*24;
% j = job_first_level12(dfonc,st,onset,par)


odir = get_subdir_regex(suj_root,'onsets')
f1 = get_subdir_regex_files(odir,'^onsets_run1_block1_nopress.mat$',1);
f2 = get_subdir_regex_files(odir,'^onsets_run1_block2_nopress.mat$',1);
f3 = get_subdir_regex_files(odir,'^onsets_run2_block1_nopress.mat$',1);
f4 = get_subdir_regex_files(odir,'^onsets_run2_block2_nopress.mat$',1);
f5 = get_subdir_regex_files(odir,'^onsets_run3_block1_nopress.mat$',1);
f6 = get_subdir_regex_files(odir,'^onsets_run3_block2_nopress.mat$',1);
fons = concat_cell(f1,f2,f3,f4,f5,f6);

% j = job_first_level12(dfonc,st,fons,par)
j = job_first_level12_champi(dfonc,st,fons,par)
spm_jobman('run',j)

fspm = get_subdir_regex_files(st,'SPM',1)
j = job_first_level12_estimate(fspm)
spm_jobman('run',j)

% contrast.values = {[-1 1 ], [0 0 -1 1],[0 0 0 0 -1 1],[0 0 0 0 0 0 -1 1] };
% contrast.names = {'rappel_diff','fluence','encodage', 'rappel_imm'};
% contrast.types = {'T','T','T','T'};

% sujets pairs
RA_W_C        =[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0];
RA_W_I        =[0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0];
RA_PW_C       =[0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0];
RA_PW_I       =[0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0];

DL_W_C        =[0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0];
DL_W_I        =[0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0];
DL_PW_C       =[0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0];
DL_PW_I       =[0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0];

instructions  =[0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0];


% % % %sujets impairs
% DL_W_C        =[1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0];
% DL_W_I        =[0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0];
% DL_PW_C       =[0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0];
% DL_PW_I       =[0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0];
% 
% RA_W_C        =[0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0];
% RA_W_I        =[0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0];
% RA_PW_C       =[0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0];
% RA_PW_I       =[0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0];
% 
% instructions  =[0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0];

DL_W_C        =[DL_W_C DL_W_C DL_W_C];
DL_W_I        =[DL_W_I DL_W_I DL_W_I];
DL_PW_C       =[DL_PW_C DL_PW_C DL_PW_C];
DL_PW_I       =[DL_PW_I DL_PW_I DL_PW_I];
RA_W_C        =[RA_W_C RA_W_C RA_W_C];
RA_W_I        =[RA_W_I RA_W_I RA_W_I];
RA_PW_C       =[RA_PW_C RA_PW_C RA_PW_C];
RA_PW_I       =[RA_PW_I RA_PW_I RA_PW_I];
instructions  =[instructions instructions instructions];

all_DL     = DL_W_C + DL_W_I + DL_PW_C + DL_PW_I;
all_RA     = RA_W_C + RA_W_I + RA_PW_C + RA_PW_I;
all_W      = DL_W_C + DL_W_I + RA_W_C + RA_W_I;
all_PW     = DL_PW_C + DL_PW_I + RA_PW_C + RA_PW_I;
all_stim   = all_W + all_PW;
all_C      = DL_W_C + DL_PW_C + RA_W_C + RA_PW_C; 
all_I      = DL_W_I + DL_PW_I + RA_W_I + RA_PW_I ;
DL_C       = DL_W_C + DL_PW_C;
DL_I       = DL_W_I + DL_PW_I;
RA_C       = RA_W_C + RA_PW_C;
RA_I       = RA_W_I + RA_PW_I;
DL_W       = DL_W_C + DL_W_I;
DL_PW      = DL_PW_C + DL_PW_I;
RA_W       = RA_W_C + RA_W_I;
RA_PW      = RA_PW_C + RA_PW_I;

contrast.values = {...
    ...%%% each regressor - rest
    DL_W_C,...
    DL_W_I,...
    DL_PW_C,...
    DL_PW_I,...
    RA_W_C,...
    RA_W_I,...
    RA_PW_C,...
    RA_PW_I,...
    instructions,...
    ...% combinations
    all_stim,...
    all_PW,...
    all_W,...
    all_DL,...
    all_RA,...
    all_C,...
    all_I,...
    DL_W,...
    DL_PW,...
    RA_W,...
    RA_PW,...
    DL_C,...
    DL_I,...
    RA_C,...
    RA_I,...
    DL_W - DL_PW,...
    DL_PW - DL_W,...
    RA_W - RA_PW,...
    RA_PW - RA_W,...
    ... %%%% incongruent-congruent and the opposite
    all_C - all_I,...
    all_I - all_C,...
    all_W - all_PW,...
    all_PW - all_W,...
    DL_C - DL_I,...
    DL_I - DL_C,...
    RA_C - RA_I,...
    RA_I - RA_C,...
    DL_W_C - DL_W_I,...
    DL_PW_C -   DL_PW_I,...
    RA_W_C - RA_W_I,...
    RA_PW_C - RA_PW_I,...
    - DL_W_C + DL_W_I,...
    - DL_PW_C +  DL_PW_I,...
    - RA_W_C + RA_W_I,...
    - RA_PW_C + RA_PW_I,...
    };

    

contrast.names = {...
    ...%%% each regressor - rest
    'DL_W_C',...
    'DL_W_I',...
    'DL_PW_C',...
    'DL_PW_I',...
    'RA_W_C',...
    'RA_W_I',...
    'RA_PW_C',...
    'RA_PW_I',...
    'instructions',...
    ...% combinations
    'all_stim',...
    'all_PW',...
    'all_W',...
    'all_DL',...
    'all_RA',...
    'all_C',...
    'all_I',...
    'DL_W',...
    'DL_PW',...
    'RA_W',...
    'RA_PW',...
    'DL_C',...
    'DL_I',...
    'RA_C',...
    'RA_I',...
    'DL_W - DL_PW',...
    'DL_PW - DL_W',...
    'RA_W - RA_PW',...
    'RA_PW - RA_W',...
    ... %%%% incongruent-congruent and the opposite
    'all_C - all_I',...
    'all_I - all_C',...
    'all_W - all_PW',...
    'all_PW - all_W',...
    'DL_C - DL_I',...
    'DL_I - DL_C',...
    'RA_C - RA_I',...
    'RA_I - RA_C',...
    'DL_W_C - DL_W_I',...
    'DL_PW_C - DL_PW_I',...
    'RA_W_C - RA_W_I',...
    'RA_PW_C - RA_PW_I',...
    'DL_W_I - DL_W_C ',...
    'DL_PW_I - DL_PW_C ',...
    'RA_W_I - RA_W_C',...
    'RA_PW_I - RA_PW_C'...
        };


for i=1:length(contrast.values)
    contrast.types{i} = 'T';
end



par.delete_previous=1
j = job_first_level12_contrast(fspm,contrast,par)

% second level

%que les control !
%suj = get_subdir_regex(pwd,'^2')
% 
% st = get_subdir_regex(suj,'stat','modelB')
% 
% j = job_second_level_ttest(st,dirout)


