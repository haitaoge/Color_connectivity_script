function job = do_fsl_merge(fo,outname,par)

if ~exist('par'),par ='';end
defpar.sge=0;
defpar.software = 'fsl'; %to set the path
defpar.software_version = 5; % 4 or 5 : fsl version
defpar.jobname = 'fslmerge';

par = complet_struct(par,defpar);

if iscell(outname)
    %recursiv call
    for kk=1:length(outname)
       job(kk) = do_fsl_merge(fo{kk},outname{kk},par);
    end
    return
end

fo = cellstr(char(fo));

cmd = sprintf('fslmerge -t %s ',outname);

%check vol info
for k=1:length(fo)
    if compare_orientation(fo(1),fo(k))
        error('volume fo(1
        vol = nifti_spm_vol(fo{k})
    keyboard
end

for k=1:length(fo)
    
  cmd = sprintf('%s %s',cmd,fo{k});
end

job = {cmd};

do_cmd_sge(job,par);


function vol = my_spm_vol(fname)


[PATHSTR,NAME1,EXT] = fileparts(fname);

if(strcmp(EXT,'.gz'))
    t=tempname
    command = sprintf('sh -c ". ${FSLDIR}/etc/fslconf/fsl.sh; FSLOUTPUTTYPE=NIFTI; export FSLOUTPUTTYPE; $FSLDIR/bin/fslmaths %s %s;"\n', fname, t);
    system(command);
    
    vol = spm_vol([t '.nii']);
else
    vol = spm_vol(fname);
end
